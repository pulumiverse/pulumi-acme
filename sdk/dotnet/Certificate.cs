// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Acme
{
    [AcmeResourceType("acme:index/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The private key of the account that is
        /// requesting the certificate. Forces a new resource when changed.
        /// </summary>
        [Output("accountKeyPem")]
        public Output<string> AccountKeyPem { get; private set; } = null!;

        /// <summary>
        /// Controls the timeout in seconds for certificate requests
        /// that are made after challenges are complete. Defaults to 30 seconds.
        /// 
        /// &gt; As mentioned, `cert_timeout` does nothing until all challenges are complete.
        /// If you are looking to control timeouts related to a particular challenge (such
        /// as a DNS challenge), see that challenge provider's specific options.
        /// </summary>
        [Output("certTimeout")]
        public Output<int?> CertTimeout { get; private set; } = null!;

        /// <summary>
        /// The common name of the certificate.
        /// </summary>
        [Output("certificateDomain")]
        public Output<string> CertificateDomain { get; private set; } = null!;

        /// <summary>
        /// The expiry date of the certificate, laid out in
        /// RFC3339 format (`2006-01-02T15:04:05Z07:00`).
        /// </summary>
        [Output("certificateNotAfter")]
        public Output<string> CertificateNotAfter { get; private set; } = null!;

        /// <summary>
        /// The certificate, any intermediates, and the private key
        /// archived as a PFX file (PKCS12 format, generally used by Microsoft products).
        /// The data is base64 encoded (including padding), and its password is
        /// configurable via the `certificate_p12_password`
        /// argument. This field is empty if creating a certificate from a CSR.
        /// </summary>
        [Output("certificateP12")]
        public Output<string> CertificateP12 { get; private set; } = null!;

        /// <summary>
        /// Password to be used when generating
        /// the PFX file stored in `certificate_p12`. Defaults to an
        /// empty string.
        /// </summary>
        [Output("certificateP12Password")]
        public Output<string?> CertificateP12Password { get; private set; } = null!;

        /// <summary>
        /// The certificate in PEM format. This does not include the
        /// `issuer_pem`. This certificate can be concatenated with `issuer_pem` to form
        /// a full chain, e.g. `"${acme_certificate.certificate.certificate_pem}${acme_certificate.certificate.issuer_pem}"`
        /// </summary>
        [Output("certificatePem")]
        public Output<string> CertificatePem { get; private set; } = null!;

        /// <summary>
        /// A pre-created certificate request, such as one
        /// from [`tls_cert_request`][tls-cert-request], or one from an external source,
        /// in PEM format. Forces a new resource when changed.
        /// 
        /// &gt; One of `common_name`, `subject_alternative_names`, or
        /// `certificate_request_pem` must be specified. `certificate_request_pem`
        /// conflicts with `common_name` and `subject_alternative_names`; You cannot have
        /// `certificate_request_pem` defined at the same time as `common_name` or
        /// `subject_alternative_names`, and vice versa. Finally, `common_name` can be
        /// blank while `subject_alternative_names` is defined, and vice versa; in this
        /// case with the `classic` Let's Encrypt profile, the first domain defined in
        /// `subject_alternative_names` becomes the common name.
        /// </summary>
        [Output("certificateRequestPem")]
        public Output<string?> CertificateRequestPem { get; private set; } = null!;

        /// <summary>
        /// The serial number, in string format, as reported by
        /// the CA.
        /// </summary>
        [Output("certificateSerial")]
        public Output<string> CertificateSerial { get; private set; } = null!;

        /// <summary>
        /// The full URL of the certificate within the ACME CA.
        /// </summary>
        [Output("certificateUrl")]
        public Output<string> CertificateUrl { get; private set; } = null!;

        /// <summary>
        /// The certificate's common name, the primary domain that the
        /// certificate will be recognized for. Forces a new resource when changed.
        /// </summary>
        [Output("commonName")]
        public Output<string?> CommonName { get; private set; } = null!;

        /// <summary>
        /// Disable the requirement for full
        /// propagation of the TXT challenge records before proceeding with validation.
        /// Defaults to `false`.
        /// 
        /// &gt; See About DNS propagation checks for details
        /// on the `recursive_nameservers` and `disable_complete_propagation` settings.
        /// </summary>
        [Output("disableCompletePropagation")]
        public Output<bool?> DisableCompletePropagation { get; private set; } = null!;

        /// <summary>
        /// The DNS challenges to
        /// use in fulfilling the request.
        /// </summary>
        [Output("dnsChallenges")]
        public Output<ImmutableArray<Outputs.CertificateDnsChallenge>> DnsChallenges { get; private set; } = null!;

        /// <summary>
        /// Defines an HTTP challenge to use in fulfilling
        /// the request.
        /// </summary>
        [Output("httpChallenge")]
        public Output<Outputs.CertificateHttpChallenge?> HttpChallenge { get; private set; } = null!;

        /// <summary>
        /// Defines an alternate type of HTTP
        /// challenge that can be used to serve up challenges to a
        /// [Memcached](https://memcached.org/) cluster.
        /// </summary>
        [Output("httpMemcachedChallenge")]
        public Output<Outputs.CertificateHttpMemcachedChallenge?> HttpMemcachedChallenge { get; private set; } = null!;

        /// <summary>
        /// Defines an alternate type of HTTP
        /// challenge that can be used to serve up challenges to a
        /// [S3](https://aws.amazon.com/s3/) bucket.
        /// </summary>
        [Output("httpS3Challenge")]
        public Output<Outputs.CertificateHttpS3Challenge?> HttpS3Challenge { get; private set; } = null!;

        /// <summary>
        /// Defines an alternate type of HTTP
        /// challenge that can be used to place a file at a location that can be served by
        /// an out-of-band webserver.
        /// </summary>
        [Output("httpWebrootChallenge")]
        public Output<Outputs.CertificateHttpWebrootChallenge?> HttpWebrootChallenge { get; private set; } = null!;

        /// <summary>
        /// The intermediate certificates of the issuer. Multiple
        /// certificates are concatenated in this field when there is more than one
        /// intermediate certificate in the chain.
        /// </summary>
        [Output("issuerPem")]
        public Output<string> IssuerPem { get; private set; } = null!;

        /// <summary>
        /// The key type for the certificate's private key. Can be one of:
        /// `P256` and `P384` (for ECDSA keys of respective length) or `2048`, `4096`, and
        /// `8192` (for RSA keys of respective length). Required when not specifying a
        /// CSR. The default is `2048` (RSA key of 2048 bits). Forces a new resource when
        /// changed.
        /// </summary>
        [Output("keyType")]
        public Output<string?> KeyType { get; private set; } = null!;

        /// <summary>
        /// The minimum amount of days remaining on the
        /// expiration of a certificate before a renewal is attempted. The default is
        /// `30`. A value of less than `0` means that the certificate will never be
        /// renewed.
        /// </summary>
        [Output("minDaysRemaining")]
        public Output<int?> MinDaysRemaining { get; private set; } = null!;

        /// <summary>
        /// Enables the [OCSP Stapling Required][ocsp-stapling]
        /// TLS Security Policy extension. Certificates with this extension must include a
        /// valid OCSP Staple in the TLS handshake for the connection to succeed.
        /// Defaults to `false`. Note that this option has no effect when using an
        /// external CSR - it must be enabled in the CSR itself. Forces a new resource
        /// when changed.
        /// 
        /// [ocsp-stapling]: https://letsencrypt.org/docs/integration-guide/#implement-ocsp-stapling
        /// 
        /// &gt; OCSP stapling requires specific webserver configuration to support the
        /// downloading of the staple from the CA's OCSP endpoints, and should be configured
        /// to tolerate prolonged outages of the OCSP service. Consider this when using
        /// `must_staple`, and only enable it if you are sure your webserver or service
        /// provider can be configured correctly.
        /// </summary>
        [Output("mustStaple")]
        public Output<bool?> MustStaple { get; private set; } = null!;

        /// <summary>
        /// Insert a delay after _every_ DNS challenge
        /// record to allow for extra time for DNS propagation before the certificate is
        /// requested. Use this option if you observe issues with requesting certificates
        /// even when DNS challenge records get added successfully. Units are in seconds.
        /// Defaults to 0 (no delay).
        /// 
        /// &gt; Be careful with `pre_check_delay` since the delay is executed _per-domain_.
        /// Take your expected delay and divide it by the number of domains you have
        /// configured (`common_name` + `subject_alternative_names`).
        /// </summary>
        [Output("preCheckDelay")]
        public Output<int?> PreCheckDelay { get; private set; } = null!;

        /// <summary>
        /// The common name of the root of a preferred
        /// alternate certificate chain offered by the CA. The certificates in
        /// `issuer_pem` will reflect the chain requested, if available, otherwise the
        /// default chain will be provided. Forces a new resource when changed.
        /// 
        /// &gt; `preferred_chain` can be used to request alternate chains on Let's Encrypt
        /// during the transition away from their old cross-signed intermediates. See [this
        /// article for more
        /// details](https://letsencrypt.org/2020/12/21/extending-android-compatibility.html).
        /// In their example titled **"What about the alternate chain?"**, the root you
        /// would put in to the `preferred_chain` field would be `ISRG Root X1`. The
        /// equivalent in the [staging
        /// environment](https://letsencrypt.org/docs/staging-environment/) is `(STAGING)
        /// Pretend Pear X1`.
        /// </summary>
        [Output("preferredChain")]
        public Output<string?> PreferredChain { get; private set; } = null!;

        /// <summary>
        /// The certificate's private key, in PEM format, if the
        /// certificate was generated from scratch and not with
        /// `certificate_request_pem`.  If
        /// `certificate_request_pem` was used, this will be blank.
        /// </summary>
        [Output("privateKeyPem")]
        public Output<string> PrivateKeyPem { get; private set; } = null!;

        /// <summary>
        /// The ACME profile to use when requesting the
        /// certificate. This can be used to control generation parameters according to
        /// the specific CA. The default is blank (no profile); forces a new resource
        /// when changed.
        /// 
        /// &gt; Let's Encrypt publishes details on their profiles at
        /// &lt;https://letsencrypt.org/docs/profiles/&gt;.
        /// </summary>
        [Output("profile")]
        public Output<string?> Profile { get; private set; } = null!;

        /// <summary>
        /// The recursive nameservers that will be
        /// used to check for propagation of DNS challenge records, in addition to some
        /// in-provider checks such as zone detection. Defaults to your system-configured
        /// DNS resolvers.
        /// </summary>
        [Output("recursiveNameservers")]
        public Output<ImmutableArray<string>> RecursiveNameservers { get; private set; } = null!;

        /// <summary>
        /// Enables revocation of a certificate upon destroy,
        /// which includes when a resource is re-created. Default is `true`.
        /// </summary>
        [Output("revokeCertificateOnDestroy")]
        public Output<bool?> RevokeCertificateOnDestroy { get; private set; } = null!;

        /// <summary>
        /// Some CA's require a reason for revocation to be provided.
        /// Use this reason (from [RFC 5280, section 5.3.1](https://www.rfc-editor.org/rfc/rfc5280#section-5.3.1).
        /// By default, no reason provided in revocation requests. The reason is a string, when provided should be one of:
        /// * unspecified
        /// * key-compromise
        /// * ca-compromise
        /// * affiliation-changed
        /// * superseded
        /// * cessation-of-operation
        /// * certificate-hold
        /// * remove-from-crl
        /// * privilege-withdrawn
        /// * aa-compromise
        /// </summary>
        [Output("revokeCertificateReason")]
        public Output<string?> RevokeCertificateReason { get; private set; } = null!;

        /// <summary>
        /// The certificate's subject alternative names;
        /// domains that this certificate will also be recognized for. Forces a new
        /// resource when changed.
        /// </summary>
        [Output("subjectAlternativeNames")]
        public Output<ImmutableArray<string>> SubjectAlternativeNames { get; private set; } = null!;

        /// <summary>
        /// Defines a TLS challenge to use in fulfilling the
        /// request.
        /// 
        /// &gt; Only one of `http_challenge`, `http_webroot_challenge`, `http_s3_challenge`
        /// and `http_memcached_challenge` can be defined at once. See the section on
        /// Using HTTP and TLS challenges for more
        /// details on using these and `tls_challenge`.
        /// </summary>
        [Output("tlsChallenge")]
        public Output<Outputs.CertificateTlsChallenge?> TlsChallenge { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("acme:index/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("acme:index/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-acme",
                AdditionalSecretOutputs =
                {
                    "accountKeyPem",
                    "certificateP12",
                    "certificateP12Password",
                    "privateKeyPem",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountKeyPem", required: true)]
        private Input<string>? _accountKeyPem;

        /// <summary>
        /// The private key of the account that is
        /// requesting the certificate. Forces a new resource when changed.
        /// </summary>
        public Input<string>? AccountKeyPem
        {
            get => _accountKeyPem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountKeyPem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Controls the timeout in seconds for certificate requests
        /// that are made after challenges are complete. Defaults to 30 seconds.
        /// 
        /// &gt; As mentioned, `cert_timeout` does nothing until all challenges are complete.
        /// If you are looking to control timeouts related to a particular challenge (such
        /// as a DNS challenge), see that challenge provider's specific options.
        /// </summary>
        [Input("certTimeout")]
        public Input<int>? CertTimeout { get; set; }

        [Input("certificateP12Password")]
        private Input<string>? _certificateP12Password;

        /// <summary>
        /// Password to be used when generating
        /// the PFX file stored in `certificate_p12`. Defaults to an
        /// empty string.
        /// </summary>
        public Input<string>? CertificateP12Password
        {
            get => _certificateP12Password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificateP12Password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A pre-created certificate request, such as one
        /// from [`tls_cert_request`][tls-cert-request], or one from an external source,
        /// in PEM format. Forces a new resource when changed.
        /// 
        /// &gt; One of `common_name`, `subject_alternative_names`, or
        /// `certificate_request_pem` must be specified. `certificate_request_pem`
        /// conflicts with `common_name` and `subject_alternative_names`; You cannot have
        /// `certificate_request_pem` defined at the same time as `common_name` or
        /// `subject_alternative_names`, and vice versa. Finally, `common_name` can be
        /// blank while `subject_alternative_names` is defined, and vice versa; in this
        /// case with the `classic` Let's Encrypt profile, the first domain defined in
        /// `subject_alternative_names` becomes the common name.
        /// </summary>
        [Input("certificateRequestPem")]
        public Input<string>? CertificateRequestPem { get; set; }

        /// <summary>
        /// The certificate's common name, the primary domain that the
        /// certificate will be recognized for. Forces a new resource when changed.
        /// </summary>
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        /// <summary>
        /// Disable the requirement for full
        /// propagation of the TXT challenge records before proceeding with validation.
        /// Defaults to `false`.
        /// 
        /// &gt; See About DNS propagation checks for details
        /// on the `recursive_nameservers` and `disable_complete_propagation` settings.
        /// </summary>
        [Input("disableCompletePropagation")]
        public Input<bool>? DisableCompletePropagation { get; set; }

        [Input("dnsChallenges")]
        private InputList<Inputs.CertificateDnsChallengeArgs>? _dnsChallenges;

        /// <summary>
        /// The DNS challenges to
        /// use in fulfilling the request.
        /// </summary>
        public InputList<Inputs.CertificateDnsChallengeArgs> DnsChallenges
        {
            get => _dnsChallenges ?? (_dnsChallenges = new InputList<Inputs.CertificateDnsChallengeArgs>());
            set => _dnsChallenges = value;
        }

        /// <summary>
        /// Defines an HTTP challenge to use in fulfilling
        /// the request.
        /// </summary>
        [Input("httpChallenge")]
        public Input<Inputs.CertificateHttpChallengeArgs>? HttpChallenge { get; set; }

        /// <summary>
        /// Defines an alternate type of HTTP
        /// challenge that can be used to serve up challenges to a
        /// [Memcached](https://memcached.org/) cluster.
        /// </summary>
        [Input("httpMemcachedChallenge")]
        public Input<Inputs.CertificateHttpMemcachedChallengeArgs>? HttpMemcachedChallenge { get; set; }

        /// <summary>
        /// Defines an alternate type of HTTP
        /// challenge that can be used to serve up challenges to a
        /// [S3](https://aws.amazon.com/s3/) bucket.
        /// </summary>
        [Input("httpS3Challenge")]
        public Input<Inputs.CertificateHttpS3ChallengeArgs>? HttpS3Challenge { get; set; }

        /// <summary>
        /// Defines an alternate type of HTTP
        /// challenge that can be used to place a file at a location that can be served by
        /// an out-of-band webserver.
        /// </summary>
        [Input("httpWebrootChallenge")]
        public Input<Inputs.CertificateHttpWebrootChallengeArgs>? HttpWebrootChallenge { get; set; }

        /// <summary>
        /// The key type for the certificate's private key. Can be one of:
        /// `P256` and `P384` (for ECDSA keys of respective length) or `2048`, `4096`, and
        /// `8192` (for RSA keys of respective length). Required when not specifying a
        /// CSR. The default is `2048` (RSA key of 2048 bits). Forces a new resource when
        /// changed.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// The minimum amount of days remaining on the
        /// expiration of a certificate before a renewal is attempted. The default is
        /// `30`. A value of less than `0` means that the certificate will never be
        /// renewed.
        /// </summary>
        [Input("minDaysRemaining")]
        public Input<int>? MinDaysRemaining { get; set; }

        /// <summary>
        /// Enables the [OCSP Stapling Required][ocsp-stapling]
        /// TLS Security Policy extension. Certificates with this extension must include a
        /// valid OCSP Staple in the TLS handshake for the connection to succeed.
        /// Defaults to `false`. Note that this option has no effect when using an
        /// external CSR - it must be enabled in the CSR itself. Forces a new resource
        /// when changed.
        /// 
        /// [ocsp-stapling]: https://letsencrypt.org/docs/integration-guide/#implement-ocsp-stapling
        /// 
        /// &gt; OCSP stapling requires specific webserver configuration to support the
        /// downloading of the staple from the CA's OCSP endpoints, and should be configured
        /// to tolerate prolonged outages of the OCSP service. Consider this when using
        /// `must_staple`, and only enable it if you are sure your webserver or service
        /// provider can be configured correctly.
        /// </summary>
        [Input("mustStaple")]
        public Input<bool>? MustStaple { get; set; }

        /// <summary>
        /// Insert a delay after _every_ DNS challenge
        /// record to allow for extra time for DNS propagation before the certificate is
        /// requested. Use this option if you observe issues with requesting certificates
        /// even when DNS challenge records get added successfully. Units are in seconds.
        /// Defaults to 0 (no delay).
        /// 
        /// &gt; Be careful with `pre_check_delay` since the delay is executed _per-domain_.
        /// Take your expected delay and divide it by the number of domains you have
        /// configured (`common_name` + `subject_alternative_names`).
        /// </summary>
        [Input("preCheckDelay")]
        public Input<int>? PreCheckDelay { get; set; }

        /// <summary>
        /// The common name of the root of a preferred
        /// alternate certificate chain offered by the CA. The certificates in
        /// `issuer_pem` will reflect the chain requested, if available, otherwise the
        /// default chain will be provided. Forces a new resource when changed.
        /// 
        /// &gt; `preferred_chain` can be used to request alternate chains on Let's Encrypt
        /// during the transition away from their old cross-signed intermediates. See [this
        /// article for more
        /// details](https://letsencrypt.org/2020/12/21/extending-android-compatibility.html).
        /// In their example titled **"What about the alternate chain?"**, the root you
        /// would put in to the `preferred_chain` field would be `ISRG Root X1`. The
        /// equivalent in the [staging
        /// environment](https://letsencrypt.org/docs/staging-environment/) is `(STAGING)
        /// Pretend Pear X1`.
        /// </summary>
        [Input("preferredChain")]
        public Input<string>? PreferredChain { get; set; }

        /// <summary>
        /// The ACME profile to use when requesting the
        /// certificate. This can be used to control generation parameters according to
        /// the specific CA. The default is blank (no profile); forces a new resource
        /// when changed.
        /// 
        /// &gt; Let's Encrypt publishes details on their profiles at
        /// &lt;https://letsencrypt.org/docs/profiles/&gt;.
        /// </summary>
        [Input("profile")]
        public Input<string>? Profile { get; set; }

        [Input("recursiveNameservers")]
        private InputList<string>? _recursiveNameservers;

        /// <summary>
        /// The recursive nameservers that will be
        /// used to check for propagation of DNS challenge records, in addition to some
        /// in-provider checks such as zone detection. Defaults to your system-configured
        /// DNS resolvers.
        /// </summary>
        public InputList<string> RecursiveNameservers
        {
            get => _recursiveNameservers ?? (_recursiveNameservers = new InputList<string>());
            set => _recursiveNameservers = value;
        }

        /// <summary>
        /// Enables revocation of a certificate upon destroy,
        /// which includes when a resource is re-created. Default is `true`.
        /// </summary>
        [Input("revokeCertificateOnDestroy")]
        public Input<bool>? RevokeCertificateOnDestroy { get; set; }

        /// <summary>
        /// Some CA's require a reason for revocation to be provided.
        /// Use this reason (from [RFC 5280, section 5.3.1](https://www.rfc-editor.org/rfc/rfc5280#section-5.3.1).
        /// By default, no reason provided in revocation requests. The reason is a string, when provided should be one of:
        /// * unspecified
        /// * key-compromise
        /// * ca-compromise
        /// * affiliation-changed
        /// * superseded
        /// * cessation-of-operation
        /// * certificate-hold
        /// * remove-from-crl
        /// * privilege-withdrawn
        /// * aa-compromise
        /// </summary>
        [Input("revokeCertificateReason")]
        public Input<string>? RevokeCertificateReason { get; set; }

        [Input("subjectAlternativeNames")]
        private InputList<string>? _subjectAlternativeNames;

        /// <summary>
        /// The certificate's subject alternative names;
        /// domains that this certificate will also be recognized for. Forces a new
        /// resource when changed.
        /// </summary>
        public InputList<string> SubjectAlternativeNames
        {
            get => _subjectAlternativeNames ?? (_subjectAlternativeNames = new InputList<string>());
            set => _subjectAlternativeNames = value;
        }

        /// <summary>
        /// Defines a TLS challenge to use in fulfilling the
        /// request.
        /// 
        /// &gt; Only one of `http_challenge`, `http_webroot_challenge`, `http_s3_challenge`
        /// and `http_memcached_challenge` can be defined at once. See the section on
        /// Using HTTP and TLS challenges for more
        /// details on using these and `tls_challenge`.
        /// </summary>
        [Input("tlsChallenge")]
        public Input<Inputs.CertificateTlsChallengeArgs>? TlsChallenge { get; set; }

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        [Input("accountKeyPem")]
        private Input<string>? _accountKeyPem;

        /// <summary>
        /// The private key of the account that is
        /// requesting the certificate. Forces a new resource when changed.
        /// </summary>
        public Input<string>? AccountKeyPem
        {
            get => _accountKeyPem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountKeyPem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Controls the timeout in seconds for certificate requests
        /// that are made after challenges are complete. Defaults to 30 seconds.
        /// 
        /// &gt; As mentioned, `cert_timeout` does nothing until all challenges are complete.
        /// If you are looking to control timeouts related to a particular challenge (such
        /// as a DNS challenge), see that challenge provider's specific options.
        /// </summary>
        [Input("certTimeout")]
        public Input<int>? CertTimeout { get; set; }

        /// <summary>
        /// The common name of the certificate.
        /// </summary>
        [Input("certificateDomain")]
        public Input<string>? CertificateDomain { get; set; }

        /// <summary>
        /// The expiry date of the certificate, laid out in
        /// RFC3339 format (`2006-01-02T15:04:05Z07:00`).
        /// </summary>
        [Input("certificateNotAfter")]
        public Input<string>? CertificateNotAfter { get; set; }

        [Input("certificateP12")]
        private Input<string>? _certificateP12;

        /// <summary>
        /// The certificate, any intermediates, and the private key
        /// archived as a PFX file (PKCS12 format, generally used by Microsoft products).
        /// The data is base64 encoded (including padding), and its password is
        /// configurable via the `certificate_p12_password`
        /// argument. This field is empty if creating a certificate from a CSR.
        /// </summary>
        public Input<string>? CertificateP12
        {
            get => _certificateP12;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificateP12 = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("certificateP12Password")]
        private Input<string>? _certificateP12Password;

        /// <summary>
        /// Password to be used when generating
        /// the PFX file stored in `certificate_p12`. Defaults to an
        /// empty string.
        /// </summary>
        public Input<string>? CertificateP12Password
        {
            get => _certificateP12Password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificateP12Password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The certificate in PEM format. This does not include the
        /// `issuer_pem`. This certificate can be concatenated with `issuer_pem` to form
        /// a full chain, e.g. `"${acme_certificate.certificate.certificate_pem}${acme_certificate.certificate.issuer_pem}"`
        /// </summary>
        [Input("certificatePem")]
        public Input<string>? CertificatePem { get; set; }

        /// <summary>
        /// A pre-created certificate request, such as one
        /// from [`tls_cert_request`][tls-cert-request], or one from an external source,
        /// in PEM format. Forces a new resource when changed.
        /// 
        /// &gt; One of `common_name`, `subject_alternative_names`, or
        /// `certificate_request_pem` must be specified. `certificate_request_pem`
        /// conflicts with `common_name` and `subject_alternative_names`; You cannot have
        /// `certificate_request_pem` defined at the same time as `common_name` or
        /// `subject_alternative_names`, and vice versa. Finally, `common_name` can be
        /// blank while `subject_alternative_names` is defined, and vice versa; in this
        /// case with the `classic` Let's Encrypt profile, the first domain defined in
        /// `subject_alternative_names` becomes the common name.
        /// </summary>
        [Input("certificateRequestPem")]
        public Input<string>? CertificateRequestPem { get; set; }

        /// <summary>
        /// The serial number, in string format, as reported by
        /// the CA.
        /// </summary>
        [Input("certificateSerial")]
        public Input<string>? CertificateSerial { get; set; }

        /// <summary>
        /// The full URL of the certificate within the ACME CA.
        /// </summary>
        [Input("certificateUrl")]
        public Input<string>? CertificateUrl { get; set; }

        /// <summary>
        /// The certificate's common name, the primary domain that the
        /// certificate will be recognized for. Forces a new resource when changed.
        /// </summary>
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        /// <summary>
        /// Disable the requirement for full
        /// propagation of the TXT challenge records before proceeding with validation.
        /// Defaults to `false`.
        /// 
        /// &gt; See About DNS propagation checks for details
        /// on the `recursive_nameservers` and `disable_complete_propagation` settings.
        /// </summary>
        [Input("disableCompletePropagation")]
        public Input<bool>? DisableCompletePropagation { get; set; }

        [Input("dnsChallenges")]
        private InputList<Inputs.CertificateDnsChallengeGetArgs>? _dnsChallenges;

        /// <summary>
        /// The DNS challenges to
        /// use in fulfilling the request.
        /// </summary>
        public InputList<Inputs.CertificateDnsChallengeGetArgs> DnsChallenges
        {
            get => _dnsChallenges ?? (_dnsChallenges = new InputList<Inputs.CertificateDnsChallengeGetArgs>());
            set => _dnsChallenges = value;
        }

        /// <summary>
        /// Defines an HTTP challenge to use in fulfilling
        /// the request.
        /// </summary>
        [Input("httpChallenge")]
        public Input<Inputs.CertificateHttpChallengeGetArgs>? HttpChallenge { get; set; }

        /// <summary>
        /// Defines an alternate type of HTTP
        /// challenge that can be used to serve up challenges to a
        /// [Memcached](https://memcached.org/) cluster.
        /// </summary>
        [Input("httpMemcachedChallenge")]
        public Input<Inputs.CertificateHttpMemcachedChallengeGetArgs>? HttpMemcachedChallenge { get; set; }

        /// <summary>
        /// Defines an alternate type of HTTP
        /// challenge that can be used to serve up challenges to a
        /// [S3](https://aws.amazon.com/s3/) bucket.
        /// </summary>
        [Input("httpS3Challenge")]
        public Input<Inputs.CertificateHttpS3ChallengeGetArgs>? HttpS3Challenge { get; set; }

        /// <summary>
        /// Defines an alternate type of HTTP
        /// challenge that can be used to place a file at a location that can be served by
        /// an out-of-band webserver.
        /// </summary>
        [Input("httpWebrootChallenge")]
        public Input<Inputs.CertificateHttpWebrootChallengeGetArgs>? HttpWebrootChallenge { get; set; }

        /// <summary>
        /// The intermediate certificates of the issuer. Multiple
        /// certificates are concatenated in this field when there is more than one
        /// intermediate certificate in the chain.
        /// </summary>
        [Input("issuerPem")]
        public Input<string>? IssuerPem { get; set; }

        /// <summary>
        /// The key type for the certificate's private key. Can be one of:
        /// `P256` and `P384` (for ECDSA keys of respective length) or `2048`, `4096`, and
        /// `8192` (for RSA keys of respective length). Required when not specifying a
        /// CSR. The default is `2048` (RSA key of 2048 bits). Forces a new resource when
        /// changed.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// The minimum amount of days remaining on the
        /// expiration of a certificate before a renewal is attempted. The default is
        /// `30`. A value of less than `0` means that the certificate will never be
        /// renewed.
        /// </summary>
        [Input("minDaysRemaining")]
        public Input<int>? MinDaysRemaining { get; set; }

        /// <summary>
        /// Enables the [OCSP Stapling Required][ocsp-stapling]
        /// TLS Security Policy extension. Certificates with this extension must include a
        /// valid OCSP Staple in the TLS handshake for the connection to succeed.
        /// Defaults to `false`. Note that this option has no effect when using an
        /// external CSR - it must be enabled in the CSR itself. Forces a new resource
        /// when changed.
        /// 
        /// [ocsp-stapling]: https://letsencrypt.org/docs/integration-guide/#implement-ocsp-stapling
        /// 
        /// &gt; OCSP stapling requires specific webserver configuration to support the
        /// downloading of the staple from the CA's OCSP endpoints, and should be configured
        /// to tolerate prolonged outages of the OCSP service. Consider this when using
        /// `must_staple`, and only enable it if you are sure your webserver or service
        /// provider can be configured correctly.
        /// </summary>
        [Input("mustStaple")]
        public Input<bool>? MustStaple { get; set; }

        /// <summary>
        /// Insert a delay after _every_ DNS challenge
        /// record to allow for extra time for DNS propagation before the certificate is
        /// requested. Use this option if you observe issues with requesting certificates
        /// even when DNS challenge records get added successfully. Units are in seconds.
        /// Defaults to 0 (no delay).
        /// 
        /// &gt; Be careful with `pre_check_delay` since the delay is executed _per-domain_.
        /// Take your expected delay and divide it by the number of domains you have
        /// configured (`common_name` + `subject_alternative_names`).
        /// </summary>
        [Input("preCheckDelay")]
        public Input<int>? PreCheckDelay { get; set; }

        /// <summary>
        /// The common name of the root of a preferred
        /// alternate certificate chain offered by the CA. The certificates in
        /// `issuer_pem` will reflect the chain requested, if available, otherwise the
        /// default chain will be provided. Forces a new resource when changed.
        /// 
        /// &gt; `preferred_chain` can be used to request alternate chains on Let's Encrypt
        /// during the transition away from their old cross-signed intermediates. See [this
        /// article for more
        /// details](https://letsencrypt.org/2020/12/21/extending-android-compatibility.html).
        /// In their example titled **"What about the alternate chain?"**, the root you
        /// would put in to the `preferred_chain` field would be `ISRG Root X1`. The
        /// equivalent in the [staging
        /// environment](https://letsencrypt.org/docs/staging-environment/) is `(STAGING)
        /// Pretend Pear X1`.
        /// </summary>
        [Input("preferredChain")]
        public Input<string>? PreferredChain { get; set; }

        [Input("privateKeyPem")]
        private Input<string>? _privateKeyPem;

        /// <summary>
        /// The certificate's private key, in PEM format, if the
        /// certificate was generated from scratch and not with
        /// `certificate_request_pem`.  If
        /// `certificate_request_pem` was used, this will be blank.
        /// </summary>
        public Input<string>? PrivateKeyPem
        {
            get => _privateKeyPem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyPem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ACME profile to use when requesting the
        /// certificate. This can be used to control generation parameters according to
        /// the specific CA. The default is blank (no profile); forces a new resource
        /// when changed.
        /// 
        /// &gt; Let's Encrypt publishes details on their profiles at
        /// &lt;https://letsencrypt.org/docs/profiles/&gt;.
        /// </summary>
        [Input("profile")]
        public Input<string>? Profile { get; set; }

        [Input("recursiveNameservers")]
        private InputList<string>? _recursiveNameservers;

        /// <summary>
        /// The recursive nameservers that will be
        /// used to check for propagation of DNS challenge records, in addition to some
        /// in-provider checks such as zone detection. Defaults to your system-configured
        /// DNS resolvers.
        /// </summary>
        public InputList<string> RecursiveNameservers
        {
            get => _recursiveNameservers ?? (_recursiveNameservers = new InputList<string>());
            set => _recursiveNameservers = value;
        }

        /// <summary>
        /// Enables revocation of a certificate upon destroy,
        /// which includes when a resource is re-created. Default is `true`.
        /// </summary>
        [Input("revokeCertificateOnDestroy")]
        public Input<bool>? RevokeCertificateOnDestroy { get; set; }

        /// <summary>
        /// Some CA's require a reason for revocation to be provided.
        /// Use this reason (from [RFC 5280, section 5.3.1](https://www.rfc-editor.org/rfc/rfc5280#section-5.3.1).
        /// By default, no reason provided in revocation requests. The reason is a string, when provided should be one of:
        /// * unspecified
        /// * key-compromise
        /// * ca-compromise
        /// * affiliation-changed
        /// * superseded
        /// * cessation-of-operation
        /// * certificate-hold
        /// * remove-from-crl
        /// * privilege-withdrawn
        /// * aa-compromise
        /// </summary>
        [Input("revokeCertificateReason")]
        public Input<string>? RevokeCertificateReason { get; set; }

        [Input("subjectAlternativeNames")]
        private InputList<string>? _subjectAlternativeNames;

        /// <summary>
        /// The certificate's subject alternative names;
        /// domains that this certificate will also be recognized for. Forces a new
        /// resource when changed.
        /// </summary>
        public InputList<string> SubjectAlternativeNames
        {
            get => _subjectAlternativeNames ?? (_subjectAlternativeNames = new InputList<string>());
            set => _subjectAlternativeNames = value;
        }

        /// <summary>
        /// Defines a TLS challenge to use in fulfilling the
        /// request.
        /// 
        /// &gt; Only one of `http_challenge`, `http_webroot_challenge`, `http_s3_challenge`
        /// and `http_memcached_challenge` can be defined at once. See the section on
        /// Using HTTP and TLS challenges for more
        /// details on using these and `tls_challenge`.
        /// </summary>
        [Input("tlsChallenge")]
        public Input<Inputs.CertificateTlsChallengeGetArgs>? TlsChallenge { get; set; }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
