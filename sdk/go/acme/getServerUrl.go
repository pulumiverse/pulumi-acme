// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acme

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-acme/sdk/go/acme/internal"
)

// ## # getServerUrl
//
// The `getServerUrl` data source can be used to retrieve the CA server URL
// that the provider is currently configured for.
//
// ## Example
//
// The following example populates the `serverUrl` output with the currently
// configured CA server URL.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-acme/sdk/go/acme"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			url, err := acme.GetServerUrl(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("serverUrl", url.ServerUrl)
//			return nil
//		})
//	}
//
// ```
//
// #### Argument Reference
//
// This data source takes no arguments.
//
// #### Attribute Reference
//
// The following attributes are exported:
//
//   - `id`: the CA server URL that the provider is currently configured for.
//   - `serverUrl`: the CA server URL that the provider is currently configured
//     for. Same as `id`.
func GetServerUrl(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetServerUrlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServerUrlResult
	err := ctx.Invoke("acme:index/getServerUrl:getServerUrl", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getServerUrl.
type GetServerUrlResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ServerUrl string `pulumi:"serverUrl"`
}

func GetServerUrlOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetServerUrlResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetServerUrlResultOutput, error) {
		opts = internal.PkgInvokeDefaultOpts(opts)
		var rv GetServerUrlResult
		secret, err := ctx.InvokePackageRaw("acme:index/getServerUrl:getServerUrl", nil, &rv, "", opts...)
		if err != nil {
			return GetServerUrlResultOutput{}, err
		}

		output := pulumi.ToOutput(rv).(GetServerUrlResultOutput)
		if secret {
			return pulumi.ToSecret(output).(GetServerUrlResultOutput), nil
		}
		return output, nil
	}).(GetServerUrlResultOutput)
}

// A collection of values returned by getServerUrl.
type GetServerUrlResultOutput struct{ *pulumi.OutputState }

func (GetServerUrlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerUrlResult)(nil)).Elem()
}

func (o GetServerUrlResultOutput) ToGetServerUrlResultOutput() GetServerUrlResultOutput {
	return o
}

func (o GetServerUrlResultOutput) ToGetServerUrlResultOutputWithContext(ctx context.Context) GetServerUrlResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetServerUrlResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerUrlResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServerUrlResultOutput) ServerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerUrlResult) string { return v.ServerUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServerUrlResultOutput{})
}
